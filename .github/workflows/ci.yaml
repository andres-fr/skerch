name: CI tests and releases

# activate for all relevant branches, tags and PRs
on:
  push:
    branches:
      - main
      - dev
    tags:
      - "**"
  pull_request:
    branches:
      - "*"

jobs:
  test_and_coveralls:
    # perform all tests (linting, docs, utest) and
    # report to coveralls
    name: "Python ${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.python-version }}"
    #
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test,lint,docs]"
    #
    - name: Lint (isort, black, flake8, pydocstyle)
      run: |
        make lint
    #
    - name: Build docs (just HTML, since PDF requires large TeX deps)
      run: |
        make docs-prepare
        make docs-html
    #
    - name: Unit tests (lightweight version) and coverage
      run: |
        make test-ci
    #
    - name: Test coveralls - python ${{ matrix.python-version }}
      run: coveralls --service=github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ matrix.python-version }}
        parallel: true
  #
  build:
    name: Build distribution
    # only run if it is a tag push
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs:
    - test_and_coveralls
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"
    - name: Install pypa/build
      run: pip install build
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the dist
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  release-pypi:
    name: Release to PyPI
    # only run if it is a tag push
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/skerchtest  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download dist
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  release-github:
    name: Release to GitHub
    # only run if it is a tag push
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs:
    - build
    runs-on: ubuntu-latest
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore
    steps:
    - name: Download dist
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Sign dist with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
